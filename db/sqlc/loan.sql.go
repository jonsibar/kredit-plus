// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: loan.sql

package db

import (
	"context"
)

const createLoan = `-- name: CreateLoan :one
INSERT INTO loans (
  user_id, 
  loan_limit,
  term,
  remaining_limit
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, loan_limit, term, remaining_limit, created_at
`

type CreateLoanParams struct {
	UserID         int64  `json:"user_id"`
	LoanLimit      string `json:"loan_limit"`
	Term           int32  `json:"term"`
	RemainingLimit string `json:"remaining_limit"`
}

func (q *Queries) CreateLoan(ctx context.Context, arg CreateLoanParams) (Loan, error) {
	row := q.db.QueryRowContext(ctx, createLoan,
		arg.UserID,
		arg.LoanLimit,
		arg.Term,
		arg.RemainingLimit,
	)
	var i Loan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LoanLimit,
		&i.Term,
		&i.RemainingLimit,
		&i.CreatedAt,
	)
	return i, err
}

const getLoan = `-- name: GetLoan :one
SELECT id, user_id, loan_limit, term, remaining_limit, created_at FROM loans
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLoan(ctx context.Context, id int64) (Loan, error) {
	row := q.db.QueryRowContext(ctx, getLoan, id)
	var i Loan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LoanLimit,
		&i.Term,
		&i.RemainingLimit,
		&i.CreatedAt,
	)
	return i, err
}

const listLoans = `-- name: ListLoans :many
SELECT id, user_id, loan_limit, term, remaining_limit, created_at FROM loans
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListLoansParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLoans(ctx context.Context, arg ListLoansParams) ([]Loan, error) {
	rows, err := q.db.QueryContext(ctx, listLoans, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Loan
	for rows.Next() {
		var i Loan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LoanLimit,
			&i.Term,
			&i.RemainingLimit,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLoanLimit = `-- name: UpdateLoanLimit :exec
UPDATE loans
  set remaining_limit = $2
WHERE id = $1
RETURNING id, user_id, loan_limit, term, remaining_limit, created_at
`

type UpdateLoanLimitParams struct {
	ID             int64  `json:"id"`
	RemainingLimit string `json:"remaining_limit"`
}

func (q *Queries) UpdateLoanLimit(ctx context.Context, arg UpdateLoanLimitParams) error {
	_, err := q.db.ExecContext(ctx, updateLoanLimit, arg.ID, arg.RemainingLimit)
	return err
}
