// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  nik, 
  full_name,
  legal_name,
  tempat_lahir,
  tanggal_lahir,
  gaji,
  foto_ktp,
  foto_selfie
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, nik, full_name, legal_name, tempat_lahir, tanggal_lahir, gaji, foto_ktp, foto_selfie, created_at
`

type CreateUserParams struct {
	Nik          string    `json:"nik"`
	FullName     string    `json:"full_name"`
	LegalName    string    `json:"legal_name"`
	TempatLahir  string    `json:"tempat_lahir"`
	TanggalLahir time.Time `json:"tanggal_lahir"`
	Gaji         string    `json:"gaji"`
	FotoKtp      string    `json:"foto_ktp"`
	FotoSelfie   string    `json:"foto_selfie"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Nik,
		arg.FullName,
		arg.LegalName,
		arg.TempatLahir,
		arg.TanggalLahir,
		arg.Gaji,
		arg.FotoKtp,
		arg.FotoSelfie,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nik,
		&i.FullName,
		&i.LegalName,
		&i.TempatLahir,
		&i.TanggalLahir,
		&i.Gaji,
		&i.FotoKtp,
		&i.FotoSelfie,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, nik, full_name, legal_name, tempat_lahir, tanggal_lahir, gaji, foto_ktp, foto_selfie, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nik,
		&i.FullName,
		&i.LegalName,
		&i.TempatLahir,
		&i.TanggalLahir,
		&i.Gaji,
		&i.FotoKtp,
		&i.FotoSelfie,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, nik, full_name, legal_name, tempat_lahir, tanggal_lahir, gaji, foto_ktp, foto_selfie, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Nik,
			&i.FullName,
			&i.LegalName,
			&i.TempatLahir,
			&i.TanggalLahir,
			&i.Gaji,
			&i.FotoKtp,
			&i.FotoSelfie,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set nik = $2, 
  full_name = $3,
  legal_name = $4,
  tempat_lahir = $5,
  tanggal_lahir = $6,
  gaji = $7,
  foto_ktp = $8,
  foto_selfie = $9
WHERE id = $1
RETURNING id, nik, full_name, legal_name, tempat_lahir, tanggal_lahir, gaji, foto_ktp, foto_selfie, created_at
`

type UpdateUserParams struct {
	ID           int64     `json:"id"`
	Nik          string    `json:"nik"`
	FullName     string    `json:"full_name"`
	LegalName    string    `json:"legal_name"`
	TempatLahir  string    `json:"tempat_lahir"`
	TanggalLahir time.Time `json:"tanggal_lahir"`
	Gaji         string    `json:"gaji"`
	FotoKtp      string    `json:"foto_ktp"`
	FotoSelfie   string    `json:"foto_selfie"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Nik,
		arg.FullName,
		arg.LegalName,
		arg.TempatLahir,
		arg.TanggalLahir,
		arg.Gaji,
		arg.FotoKtp,
		arg.FotoSelfie,
	)
	return err
}
