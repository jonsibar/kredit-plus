// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  user_id, 
  loan_id,
  otr,
  admin_fee,
  jumlah_cicilan,
  jumlah_bunga,
  nama_asset
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, user_id, loan_id, nomor_kontrak, otr, admin_fee, jumlah_cicilan, jumlah_bunga, nama_asset, created_at
`

type CreateTransactionParams struct {
	UserID        int64  `json:"user_id"`
	LoanID        int64  `json:"loan_id"`
	Otr           string `json:"otr"`
	AdminFee      string `json:"admin_fee"`
	JumlahCicilan string `json:"jumlah_cicilan"`
	JumlahBunga   string `json:"jumlah_bunga"`
	NamaAsset     string `json:"nama_asset"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.LoanID,
		arg.Otr,
		arg.AdminFee,
		arg.JumlahCicilan,
		arg.JumlahBunga,
		arg.NamaAsset,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LoanID,
		&i.NomorKontrak,
		&i.Otr,
		&i.AdminFee,
		&i.JumlahCicilan,
		&i.JumlahBunga,
		&i.NamaAsset,
		&i.CreatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, user_id, loan_id, nomor_kontrak, otr, admin_fee, jumlah_cicilan, jumlah_bunga, nama_asset, created_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LoanID,
		&i.NomorKontrak,
		&i.Otr,
		&i.AdminFee,
		&i.JumlahCicilan,
		&i.JumlahBunga,
		&i.NamaAsset,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, user_id, loan_id, nomor_kontrak, otr, admin_fee, jumlah_cicilan, jumlah_bunga, nama_asset, created_at FROM transactions
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTransactionsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LoanID,
			&i.NomorKontrak,
			&i.Otr,
			&i.AdminFee,
			&i.JumlahCicilan,
			&i.JumlahBunga,
			&i.NamaAsset,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
